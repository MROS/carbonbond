syntax = 'proto3';

package chat_proto;

// 時間都以 int64 來表示 unix time （毫秒）

message ClientSendData {
    int64 id = 1;
    oneof Data {
        Send send = 2;
        History history = 3;
        RecentChat recent_chat = 4;
        IncomingResponse incoming_response = 5;
    }
}

message ServerSendData {
    int64 id = 1;
    oneof Data {
        Incoming incoming = 2;
        SendResponse send_response = 3;
        HistoryResponse history_response = 4;
        RecentChatResponse recent_chat_response = 5;
    }
}

// 常用結構
message Error {
    string reason = 1;
}

message Message {
    // 每則訊息在它所屬的聊天室／頻道中都有一個獨一無二的 id
    int64 id = 1;
    int64 sender_id = 2;
    string sender_name = 3;
    string content = 4;
    int64 time = 5;
}

message ChannelLocation {
    bool is_upgraded = 1;
    int64 channel_id = 2;
}

// 以下 API 由伺服器端發出
message Incoming {
    oneof Location {
        ChannelLocation channel_location = 1;
        int64 direct_receiver_id = 2;
    }
    Message message = 3;
}

message IncomingResponse {
    oneof Response {
        Error error = 1;
        bool ok = 2;
    }
}

// 以下 API 由客戶端發出

// websocket 一連通就發出
// 獲取時間在 before_time 之前的 number 個對話
message RecentChat {
    int64 number = 1;
    int64 before_time = 2;
}

message RecentChatResponse {
    // 一個聊天室的摘要
    // 用來顯示最近對話
    message ChatAbstract {
        message DirectChat {
            int64 direct_chat_id = 1;
            string name = 2;
            Message latest_message = 3;
            int64 read_time = 4;
        }
        message GroupChat {
            int64 group_chat_id = 1;
            string group_name = 2;
            Message latest_message = 3;
            int64 read_time = 4;
        }
        message UpgradedGroupChat {
            int64 group_chat_id = 1;
            string group_name = 2;
            repeated string channel_names = 3;
            int64 read_time = 4;
        }
        oneof Info {
            DirectChat direct_chat = 1;
            GroupChat group_chat = 2;
            UpgradedGroupChat upgraded_group_chat = 3;
        }
    }
    // NOTE: protobuf 的 repeated（陣列）必須包裝一層才能放到 oneof
    // 因此會導致額外的包裝
    message ChatAbstracts {
        repeated ChatAbstract chats = 1;
    }
    oneof Response {
        Error error = 1;
        ChatAbstracts chats = 2;
    }
}

message Send {
    oneof Location {
        ChannelLocation channel_location = 1;
        int64 direct_receiver_id = 2;
    }
    string content = 3;
}

message SendResponse {
    oneof Response {
        Error error = 1;
        bool ok = 2;
    }
}

message History {
    oneof Location {
        ChannelLocation channel_location = 1;
        int64 direct_receiver_id = 2;
    }
    // 若 before_id = -1 ，則代表請求最新的對話
    // 每個對話都有自己的 id ，我們要拿的是在此 before_id 之前的 number 個對話
    int64 before_id = 3;
    int64 number = 4;
}

message HistoryResponse {
    message Messages {
        repeated Message messages = 1;
    }
    oneof Response {
        Error error = 1;
        Messages messages = 2;
    }
}